#!/usr/bin/python3
import sys
import os
import struct

def sdbm_hash(s):
    hash = 0
    for c in s:
        hash = ord(c) + (hash << 6) + (hash << 16) - hash
    return hash & 0xffffffffffffffff

def feistel_round(data, key):
    temp = (data ^ key) * 0x0a3b2c1
    return (temp >> 23) | (temp << 41) & 0xffffffffffffffff

def generate_round_keys(seed):
    keys = []
    a = 1103515245
    c = 12345
    m = 2**64
    for _ in range(10):
        seed = (seed * a + c) % m
        keys.append(seed)
    return keys

def encrypt_block(block, keys):
    left, right = struct.unpack("<QQ", block)
    for key in keys:
        new_left = right
        new_right = left ^ feistel_round(right, key)
        left, right = new_left, new_right
    return struct.pack("<QQ", right, left)

def decrypt_block(block, keys):
    right, left = struct.unpack("<QQ", block)
    for key in reversed(keys):
        new_right = left
        new_left = right ^ feistel_round(left, key)
        right, left = new_right, new_left
    return struct.pack('<QQ', left, right)

def pad(data):
    padding_length = 16 - (len(data) % 16)
    return data + bytes([padding_length] * padding_length)

def unpad(data):
    padding_length = data[-1]
    return data[:-padding_length]

def process_file(inputFilePath, outputFilePath, password, mode):
    if not os.path.exists(inputFilePath):
        print(f"File {inputFilePath} does not exist!")
        return

    with open(inputFilePath, 'rb') as inputFile, open(outputFilePath, 'wb') as outputFile:
        data = inputFile.read()
        if mode == 'encrypt':
            data = pad(data)

        main_key = sdbm_hash(password)
        round_keys = generate_round_keys(main_key)

        for i in range(0, len(data), 16):
            block = data[i:i+16]
            if mode == 'encrypt':
                outputFile.write(encrypt_block(block, round_keys))
            else:
                decrypted_block = decrypt_block(block, round_keys)
                if i + 16 >= len(data):
                    decrypted_block = unpad(decrypted_block)
                outputFile.write(decrypted_block)

def main():
    if len(sys.argv) != 5:
        print("Usage: feistel -e password plaintext ciphertext")
        print("       feistel -d password ciphertext plaintext")
        sys.exit(1)

    mode, password, inputPath, outputPath = sys.argv[1:]
    if mode == '-e':
        process_file(inputPath, outputPath, password, 'encrypt')
    elif mode == '-d':
        process_file(inputPath, outputPath, password, 'decrypt')

if __name__ == "__main__":
    main()