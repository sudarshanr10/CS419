#!/usr/bin/python3
import sys
import os
#import 
def lcg(seed, a = 1103515245, c = 12345, m = 256):
    while True: 
        seed = (a * seed + c) % m
        yield seed
    
def sdbm_hash(s):
    if not isinstance(s, str) or len(s) == 0:
        raise ValueError("Error: Password must be a non-empty string.")
    hash = 0
    for c in s:
        hash = ord(c) + (hash << 6) + (hash << 16) - hash
    return hash & 0xffffffffffffffff

def xor_with_keystream(data, seed):
    keystream = lcg(seed)
    return bytes([b ^ next(keystream) for b in data])

def process_file(inputFilePath, outputFilePath, password):
    try:
        if not isinstance(password, str) or len(password) == 0:
            raise ValueError("Error: Password must be a non-empty string!")
        if not os.path.exists(inputFilePath):
            raise FileNotFoundError(f"Error: File '{inputFilePath}' does not exist!")
        if not os.path.isfile(inputFilePath):
            raise ValueError(f"Error: '{inputFilePath}' is not a valid file!")
        if not os.access(inputFilePath, os.R_OK):
            raise PermissionError(f"Error: File '{inputFilePath}' cannot be read (check permissions)!")

        output_dir = os.path.dirname(os.path.abspath(outputFilePath))
        if not os.access(output_dir, os.W_OK):
            raise PermissionError(f"Error: Cannot write to directory '{output_dir}'!")

        with open(inputFilePath, 'rb') as inputFile, open(outputFilePath, 'wb') as outputFile:
            seed = sdbm_hash(password)
            while True:
                chunk = inputFile.read(1024)
                if not chunk:
                    break
                encryptedChunk = xor_with_keystream(chunk, seed)
                outputFile.write(encryptedChunk)

        print(f"Success: Processed '{inputFilePath}' -> '{outputFilePath}'")

    except ValueError as ve:
        print(f"Error: {ve}")
    except FileNotFoundError as fe:
        print(f"Error: {fe}")
    except PermissionError as pe:
        print(f"Error: {pe}")
    except Exception as e:
        print(f"Error: An unexpected error occurred - {e}")

               
def main():
    if len(sys.argv) != 4:
        print("Usage: scrypt password plaintext ciphertext")
        print("       scrypt password ciphertext plaintext")
        sys.exit(1)
    
    _, password, inputPath, outputPath = sys.argv
    try:
        process_file(inputPath, outputPath, password)
    except Exception as e:
        print(f"Error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
